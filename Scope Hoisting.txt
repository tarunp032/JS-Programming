
1. Function Expression Hoisting
javascript
Copy code
console.log(typeof test);
var test = function() { return 5; };

Output: undefined
Explanation: Variables declared with var are hoisted, but their value is not initialized until the code is executed. Therefore, test is undefined at the time of the console.log call.

2. Lexical Scoping with Let and Var
javascript
Copy code
let x = 5;
function scopeTest() {
  console.log(x);
  var x = 10;
}
scopeTest();

Output: undefined
Explanation: The variable x inside the function is hoisted, but its value is not assigned yet when console.log is called, so it prints undefined.

3. Closure Inside a Loop
javascript
Copy code
function createIncrementer() {
  let count = 0;
  return function() {
    return ++count;
  };
}

let increment = createIncrementer();
console.log(increment());
console.log(increment());

Output:
Copy code
1
2

Explanation: Each call to increment() accesses the same count variable due to closure, so it increments the shared value.

4. Variable Hoisting
javascript
Copy code
console.log(foo);
var foo = 10;

Output: undefined
Explanation: The variable foo is hoisted, but its value is assigned after the console.log call, so it prints undefined.

5. Block Scope with Let
javascript
Copy code
function blockScope() {
  let x = 10;
  if (true) {
    let x = 20;
    console.log(x); // 20
  }
  console.log(x); // 10
}
blockScope();

Output:
Copy code
20
10

Explanation: The let declaration creates block-scoped variables. The x inside the if block is different from the x outside the block.

6. Function Scope and Closures
javascript
Copy code
function outer() {
  var outerVar = "outer";
  return function inner() {
    console.log(outerVar);
  };
}
var innerFunc = outer();
innerFunc();

Output: outer
Explanation: The inner function forms a closure and can access variables from its outer scope, even after outer() has finished execution.

7. Variable Shadowing
javascript
Copy code
let a = 10;
function shadow() {
  let a = 5;
  console.log(a);
}
shadow();
console.log(a);

Output:
Copy code
5
10

Explanation: The a inside the function is shadowing the a declared outside. They are two different variables.

8. Closure and Multiple Functions
javascript
Copy code
function outerFunc() {
  let count = 0;
  return {
    increment: function() {
      count++;
      console.log(count);
    },
    decrement: function() {
      count--;
      console.log(count);
    }
  };
}

let counter = outerFunc();
counter.increment();
counter.decrement();

Output:
Copy code
1
0

Explanation: Both increment and decrement share the same count variable because of closure.

9. Lexical Scoping with Functions
javascript
Copy code
function outerFunc() {
  let x = 10;
  function innerFunc() {
    console.log(x);
  }
  return innerFunc;
}
let result = outerFunc();
result();

Output: 10
Explanation: The innerFunc has access to x from its lexical scope due to closure.

10. Hoisting with Function Declarations
javascript
Copy code
function hoistingTest() {
  console.log(x);
  var x = 10;
}
hoistingTest();

Output: undefined
Explanation: The variable x is hoisted but its value is undefined at the time of the console.log.

11. Functions and Default Parameters
javascript
Copy code
function add(a = 5, b = a * 2) {
  return a + b;
}
console.log(add(3)); // 9
console.log(add()); // 15

Output:
Copy code
9
15

Explanation: Default values are used when no arguments are passed. In the first case, a = 3 and b = 6, in the second case a = 5 and b = 10.

12. Closure with State
javascript
Copy code
function createCounter() {
  let count = 0;
  return function() {
    return ++count;
  };
}
const counter = createCounter();
console.log(counter());
console.log(counter());

Output:
Copy code
1
2

Explanation: The counter function has access to count due to closure, and each call increments the shared variable.

13. Hoisting in Functions
javascript
Copy code
function testHoist() {
  console.log(foo);
  var foo = 10;
}
testHoist();

Output: undefined
Explanation: The variable foo is hoisted but is undefined before its value is assigned.

14. Self-Invoking Function with Closure
javascript
Copy code
(function() {
  var x = 5;
})();
console.log(x);

Output: ReferenceError: x is not defined
Explanation: The variable x is scoped to the IIFE (Immediately Invoked Function Expression), so it is not accessible outside.

15. Closure and Returning Functions
javascript
Copy code
function multiplierFactory(factor) {
  return function(num) {
    return num * factor;
  };
}
let double = multiplierFactory(2);
console.log(double(4));

Output: 8
Explanation: The returned function has access to factor via closure, so calling double(4) multiplies 4 * 2.

16. Block Scope and Let
javascript
Copy code
let x = 5;
function checkScope() {
  let x = 10;
  console.log(x);
}
checkScope();
console.log(x);

Output:
Copy code
10
5

Explanation: The x inside the function is different from the x outside due to block scoping with let.

17. Functions and Parameter Hoisting
javascript
Copy code
function hoistParam(param) {
  console.log(param);
  var param = 20;
}
hoistParam(10);

Output: 10
Explanation: The function parameter param takes precedence over the var param declaration, so 10 is logged.

18. Nested Functions and Scope Chain
javascript
Copy code
let x = 1;
function outer() {
  let x = 2;
  function inner() {
    console.log(x);
  }
  inner();
}
outer();

Output: 2
Explanation: The inner function can access the x variable from the outer function due to lexical scoping.

19. Arguments Object
javascript
Copy code
function testArgs(a, b, c) {
  console.log(arguments[0], arguments[1], arguments[2]);
}
testArgs(1, 2);

Output:
javascript
Copy code
1 2 undefined

Explanation: The arguments object contains the passed arguments. Since c is not passed, it is undefined.

20. Variable Shadowing in Blocks
javascript
Copy code
let x = 5;
{
  let x = 10;
  console.log(x);
}
console.log(x);

Output:
Copy code
10
5

Explanation: The x inside the block shadows the outer x due to block scoping.

21. Closures and Lexical Scope
javascript
Copy code
function outer() {
  let a = 1;
  function inner() {
    console.log(a);
  }
  return inner;
}
let result = outer();
result();

Output: 1
Explanation: The inner function has access to the variable a from its outer scope via closure.

22. Hoisting in Function Expressions
javascript
Copy code
console.log(typeof foo);
var foo = function() {
  return 5;
};

Output: undefined
Explanation: foo is hoisted as undefined because itâ€™s a variable declared with var.

23. Function Declaration Hoisting
javascript
Copy code
function hoistFunc() {
  console.log(foo());
  function foo() {
    return 10;
  }
}
hoistFunc();

Output: 10
Explanation: Function declarations are fully hoisted, so foo() can be called before its declaration.

24. Closures and Arguments
javascript
Copy code
function createFunction() {
  let count = 0;
  return function() {
    return ++count;
  };
}

const increment = createFunction();
console.log(increment());
console.log(increment());

Output:
Copy code
1
2

Explanation: The closure allows access to the count variable even after createFunction has finished execution. Each call increments the count.

25. Arrow Function and this Binding
javascript
Copy code
function Counter() {
  this.count = 0;
  setInterval(() => {
    this.count++;
    console.log(this.count);
  }, 1000);
}
let counter = new Counter();

Output: (prints 1, 2, 3, ... every second)
Explanation: Arrow functions don't have their own this context; they inherit this from their enclosing scope, so this.count refers to the Counter instance's count.

26. Immediate Invocation and Scope
javascript
Copy code
(function() {
  var x = 5;
})();
console.log(x);

Output: ReferenceError: x is not defined
Explanation: The variable x is declared inside an IIFE (Immediately Invoked Function Expression) and is scoped to that function, so it is not accessible outside.

27. Closures with Nested Functions
javascript
Copy code
function outerFunction() {
  var outerVar = "I'm outer";
  return function innerFunction() {
    console.log(outerVar);
  };
}
outerFunction()();

Output: "I'm outer"
Explanation: The innerFunction forms a closure over the outerVar, allowing it to access outerVar even after outerFunction has finished executing.

28. Hoisting of Function Expressions
javascript
Copy code
console.log(typeof func);
var func = function() {
  return 5;
};

Output: undefined
Explanation: Variables declared with var are hoisted but initialized with undefined. The function expression func is not assigned until the code is executed.

29. Block Scope with Let
javascript
Copy code
let x = 10;
if (true) {
  let x = 20;
  console.log(x);
}
console.log(x);

Output:
Copy code
20
10

Explanation: The let variable inside the block creates a separate scope, so the x inside the if block does not affect the x outside.

30. Closures and State Management
javascript
Copy code
function counter() {
  let count = 0;
  return function() {
    return ++count;
  };
}
const increment = counter();
console.log(increment());
console.log(increment());

Output:
Copy code
1
2

Explanation: Each call to increment() accesses the same count variable due to closure, incrementing the shared value.

31. Hoisting and Function Parameters
javascript
Copy code
function testHoisting(param) {
  console.log(param);
  var param = 20;
}
testHoisting(10);

Output: 10
Explanation: Function parameters have precedence over variables declared inside the function. The var param declaration is hoisted but ignored because param is already defined as a function argument.

32. Variable Shadowing in Nested Functions
javascript
Copy code
let a = 1;
function outer() {
  let a = 2;
  function inner() {
    console.log(a);
  }
  inner();
}
outer();

Output: 2
Explanation: The inner function accesses the variable a from the outer function, not the outer a, due to lexical scoping.

33. Closures with Multiple Functions
javascript
Copy code
function createCounter() {
  let count = 0;
  return {
    increment: function() {
      count++;
      console.log(count);
    },
    decrement: function() {
      count--;
      console.log(count);
    }
  };
}
const counter = createCounter();
counter.increment();
counter.decrement();

Output:
Copy code
1
0

Explanation: Both increment and decrement share the same count variable due to closure.

34. Lexical Scope and Closures
javascript
Copy code
let a = 1;
function outerFunc() {
  let a = 2;
  return function() {
    console.log(a);
  };
}
let result = outerFunc();
result();

Output: 2
Explanation: The inner function has access to the variable a from its lexical environment (inside outerFunc) and not the outer a.

35. Hoisting and Function Declarations
javascript
Copy code
console.log(test());
function test() {
  return 5;
}

Output: 5
Explanation: Function declarations are fully hoisted, meaning the function test can be called before it is defined.

36. Closures with Functions Returning Functions
javascript
Copy code
function createMultiplier(multiplier) {
  return function(num) {
    return num * multiplier;
  };
}
let double = createMultiplier(2);
console.log(double(4));

Output: 8
Explanation: The function returned by createMultiplier forms a closure over the multiplier variable, allowing it to use the value of multiplier when called.

37. Block Scope with Let and Var
javascript
Copy code
var x = 10;
if (true) {
  let x = 20;
  console.log(x);
}
console.log(x);

Output:
Copy code
20
10

Explanation: The let x inside the if block is block-scoped and doesn't affect the outer var x.

38. Closures and State Encapsulation
javascript
Copy code
function createCounter() {
  let count = 0;
  return function() {
    return ++count;
  };
}
let counter = createCounter();
console.log(counter());
console.log(counter());

Output:
Copy code
1
2

Explanation: The closure keeps the count variable alive, and each invocation of counter() increments the value of count.

39. Function Expressions and Hoisting
javascript
Copy code
console.log(typeof func);
var func = function() {
  return 10;
};

Output: undefined
Explanation: The variable func is hoisted but is initialized as undefined. Function expressions are not hoisted as fully as function declarations.

40. Function Scope and Hoisting
javascript
Copy code
function scopeTest() {
  console.log(x);
  var x = 10;
}
scopeTest();

Output: undefined
Explanation: The variable x is hoisted but not initialized, so when console.log(x) is called, x is undefined.

41. Closure and Returning Functions
javascript
Copy code
function multiplierFactory(factor) {
  return function(num) {
    return num * factor;
  };
}
let double = multiplierFactory(2);
console.log(double(5));

Output: 10
Explanation: The function returned by multiplierFactory has access to the factor due to closure, and when called with 5, it returns 5 * 2.

42. Lexical Scoping and Function Variables
javascript
Copy code
let x = 10;
function outerFunc() {
  console.log(x);
}
function test() {
  let x = 20;
  outerFunc();
}
test();

Output: 10
Explanation: The outerFunc uses the x from the outer (global) scope because functions maintain their original scope, not the scope from which they are called.

43. Scoping and Temporal Dead Zone
javascript
Copy code
console.log(a);
let a = 10;

Output: ReferenceError: Cannot access 'a' before initialization
Explanation: Variables declared with let and const are in the Temporal Dead Zone (TDZ) from the start of the block until they are initialized. During this phase, they cannot be accessed.

44. Hoisting in Nested Functions
javascript
Copy code
function outer() {
  console.log(a);
  var a = 10;
  function inner() {
    console.log(a);
    var a = 20;
  }
  inner();
}
outer();

Output:
javascript
Copy code
undefined
undefined

Explanation: In both outer and inner, the variable a is hoisted but uninitialized, so undefined is logged before the value is assigned.

45. Closure with Function Re-Assignment
javascript
Copy code
let count = 0;
function counter() {
  count++;
  return count;
}

let c1 = counter;
let c2 = counter;

console.log(c1());
console.log(c2());
console.log(c1());

Output:
Copy code
1
2
3

Explanation: c1 and c2 refer to the same counter function, and since count is a global variable, it is incremented globally across all calls to counter.

46. Variable Scope in Loops (Var vs. Let)
javascript
Copy code
for (var i = 0; i < 3; i++) {
  for (let i = 0; i < 2; i++) {
    console.log(i);
  }
}
console.log(i);

Output:
Copy code
0
1
0
1
0
1
3

Explanation: The let i inside the inner loop is block-scoped, so it doesnâ€™t interfere with the var i in the outer loop. After the loop, var i is 3 because var is function-scoped.

47. Lexical Scope and Closures
javascript
Copy code
function outer() {
  let a = 1;
  return function inner() {
    return a++;
  };
}

const x = outer();
console.log(x());
console.log(x());
console.log(a);

Output:
vbnet
Copy code
1
2
ReferenceError: a is not defined

Explanation: The variable a is incremented inside the closure, but itâ€™s not accessible from the global scope, hence the ReferenceError.

48. Re-declaration with Var and Let
javascript
Copy code
var x = 10;
let x = 20;
console.log(x);

Output: SyntaxError: Identifier 'x' has already been declared
Explanation: let does not allow redeclaration of the same variable name within the same scope, unlike var, which can be redeclared.

49. Function and Block Scope
javascript
Copy code
function outer() {
  var x = 10;
  if (true) {
    let x = 20;
    console.log(x);
  }
  console.log(x);
}
outer();

Output:
Copy code
20
10

Explanation: The let x inside the if block is block-scoped and does not affect the outer var x, so two different values are logged.

50. Const with Objects
javascript
Copy code
const obj = { a: 10 };
obj.a = 20;
obj = { a: 30 };
console.log(obj.a);

Output: TypeError: Assignment to constant variable
Explanation: const allows mutation of object properties but does not allow reassignment of the object itself.

51. Immediate Invocation with Var and Let
javascript
Copy code
for (let i = 0; i < 3; i++) {
  (function() {
    console.log(i);
  })();
}

Output:
Copy code
0
1
2

Explanation: let in a loop creates a new block scope for each iteration, so each IIFE gets a fresh value of i.

52. Function Hoisting vs. Variable Hoisting
javascript
Copy code
function test() {
  console.log(foo);
  var foo = 10;
  function foo() {}
  console.log(foo);
}
test();

Output:
csharp
Copy code
[Function: foo]
10

Explanation: Function declarations are hoisted above variable declarations, so the first console.log(foo) logs the function foo. Later, the variable foo is assigned 10.


